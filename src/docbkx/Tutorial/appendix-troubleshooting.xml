<?xml version="1.0" encoding="UTF-8"?>
<appendix version="5.0" xmlns="http://docbook.org/ns/docbook"
          xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:xi="http://www.w3.org/2001/XInclude"
          xmlns:svg="http://www.w3.org/2000/svg"
          xmlns:m="http://www.w3.org/1998/Math/MathML"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:db="http://docbook.org/ns/docbook">
  <title>Troubleshooting</title>

<!--  <section>
    <title>Debugging a failing machine image creation</title>

    <para>When looking for the source of a failure in creating a new machine
    image, the simplest thing to do is to log into the machine and run the
    recipe by hand. Once the recipe works, copy/paste it back into the SlipStream
    image definition and re-run the image creation. Here are the steps to do
    that:</para>

    <orderedlist>
      <listitem xml:id="freezeonerror">
        <para xreflabel="">Instruct SlipStream to
        run forever if an error occurs.
		To do that, once logged-in, access your account by
        clicking on your username at the top right corner of the page. Click
        the Edit button and on that page in the
        <emphasis>Properties</emphasis> section, tick the
		<emphasis>General On Error Run Forever</emphasis> option.
		From now on, SlipStream will
        leave your machines running when an error occurs, so make sure you kill
		them manually.</para>
		
		<para>To terminate running machines, from the run page, click the
		<emphasis>Terminate</emphasis> button. You can also use the corresponding
		native cloud interface.</para>

        <note>
          <para>These settings will only affect new executions, therefore,
          they will not affect already running machines.</para>
        </note>
      </listitem>

      <listitem>
        <para>Once you have made the above changes re-run the failing machine
        image creation. Find the instance id of the machine from the execution
        properties. This id can be found in the execution property list as
        <literal>instanceid</literal> or on the dashboard by hovering over the
        corresponding icon.  Then login to it using ssh and the private key
        corresponding to the public key you have configured your SlipStream
		account for.</para>
      </listitem>

      <listitem xml:id="environmentsetup">
        <para>Once logged-in to the failing machine, configure the SlipStream
        client environment. To do that, change to the following directory:</para>
		<command>cd /opt/slipstream/client/sbin</command>
		<para>and source the following file:</para>
        <para><programlisting>source slipstream.setenv</programlisting></para>

        <para>Your local environment should now be the same as the one when
        the SlipStream orchestrator runs your recipe. Currently, the SlipStream
		command-line client will only work if you run from this directory.</para>
      </listitem>

      <listitem>
        <para>You can now rerun the recipe scripts. The image creation
        workflow is described in the Reference Manual, but here's a summary of
        the creation steps, omitting the stock image creation steps and the
        custom Python environment sometimes required:</para>

        <para><orderedlist>
            <listitem>
              <para>package installation</para>
            </listitem>

            <listitem>
              <para>recipe execution</para>
            </listitem>
          </orderedlist></para>

        <note>
          <para>If you're creating a stock image, refer to the Reference
          Manual for details on advanced image creation process.</para>
        </note>

        <para>If defined, the <literal>recipe</literal> script is copied by
        the orchestrator in the <literal>/tmp/slipstream</literal> directory.
        The file <literal>slipstream-remote-script</literal> is the script
        generated by SlipStream and executed on the machine by the
        orchestrator via ssh. If you have defined packages to be installed,
        the <literal>slipstream-remote-script</literal> script will contain a
        call to the <literal>ss-install-package</literal> command with the
        packages as arguments. Internally, the
        <literal>ss-install-package</literal> command will attempt to identify
        the right local package installation command (e.g.
        <literal>yum</literal>, <literal>apt</literal>). This command expects
        that the packages are located in the default package repository as
        configured on the local system by the time the command runs.</para>
      </listitem>
    </orderedlist>

    <para>You now have the option of rerunning the
    <literal>slipstream-remote-script</literal>, only the
    <literal>recipe</literal> or the packages installation (by either using
    the local package command or the <literal>ss-install-package</literal>
    command). Once you've identified and fixed the image creation problem, you
    can copy and paste these modifications back in SlipStream and re-run a
    clean build.</para>
  </section> -->

  <section>
    <title>Debugging a failing deployment</title>

    <para>When looking for the causes of a failed deployment, here are a few
    tips and tricks that might help you identifying the source of the
    problem.</para>

    <para>Most causes of deployment failures are due to faulty scripts. Here's
    a method to avoid playing trial and error which can be time consuming in
    finding the cause of the error:</para>

    <orderedlist>
      <listitem xml:id="freezeonerror">
        <para xreflabel="">Instruct SlipStream to
        run forever if an error occurs.
		To do that, once logged-in, access your account by
        clicking on your username at the top right corner of the page. Click
        the Edit button and on that page in the
        <emphasis>Properties</emphasis> section, tick the
		<emphasis>General On Error Run Forever</emphasis> option.
		From now on, SlipStream will
        leave your machines running when an error occurs, so make sure you kill
		them manually.</para>

		<para>To terminate running machines, from the run page, click the
		<emphasis>Terminate</emphasis> button. You can also use the corresponding
		native cloud interface.</para>

        <note>
          <para>These settings will only affect new executions, therefore,
          they will not affect already running machines.</para>
        </note>
      </listitem>

      <listitem>
        <para>Once you have made these changes re-run the failing deployment.
        Then, find the instance id of the failing machine.
		This id can be found in the <emphasis>Runtime Parameters</emphasis> list as
        <literal>&lt;nodename&gt;.&lt;index&gt;:instanceid</literal> and login to it using
        ssh:</para>

        <para><programlisting>ssh -i &lt;private-key&gt; root@&lt;machine ip address&gt;</programlisting></para>

        <para>where <literal>&lt;private-key&gt;</literal> is the private key
        corresponding to the public key you have configured in your SlipStream
		account.</para>
      </listitem>

      <listitem xml:id="environmentsetup">
        <para>Once logged-in to the failing machine, configure the SlipStream
        client environment. To do that, change to the following directory:</para>
		<para><programlisting>cd /opt/slipstream/client/sbin</programlisting></para>
		<para>and source the following file:</para>
        <para><programlisting>source slipstream.setenv</programlisting></para>

        <para>Your local environment should now be the same as the one when
        the SlipStream orchestrator runs your recipe. Currently, the SlipStream
		command-line client will only work if you run from this directory.</para>
      </listitem>


      <listitem>
        <para>At this point, from a single node, you can re-run its execution
        script: <literal>/tmp/tmp*</literal>. However, if you're
        troubleshooting a deployment, it's likely that your deployment will
        already have failed, which includes the abort flag being set. This
        special flag is used to unblock all blocking calls to SlipStream to
        make sure the deployment workflow finishes in a controlled manner
        despite an error being detected. To reset the workflow, run the
        <literal>ss-abort</literal> command with the
        <literal>--cancel</literal> option.</para>

        <para><programlisting>ss-abort --cancel</programlisting></para>
      </listitem>

      <listitem>
        <para>From this point on, you should be able to execute your
        <literal>execute</literal> script which might help you to identify the
        source of the deployment failure.</para>
      </listitem>
    </orderedlist>

    <para>Sometime, you'll also need to (re)set key/value pairs from the
    current node or from other nodes. You can use the
    <literal>ss-set</literal> to set values, as from the standard targets an
    recipes, as well as <literal>ss-get</literal> to fetch key values.</para>
  </section>
</appendix>
