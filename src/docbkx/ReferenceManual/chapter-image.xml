<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="chap-machine-image-module"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <title>Machine Image Module</title>

  <section>
    <title>Introduction</title>

    <para><emphasis>Machine Image</emphasis> in SlipStream is the model
    describing the creation of a virtual machine image, as well as it
    behaviour during deployment execution. The model can inherit from another
    machine image model, hence extending the parent model. We encourage you to
    build parameterized machine image models, such that you can more easily
    reuse them. The model also includes a set of scripts, parameter and
    properties. The machine image model includes two main groups of metadata.
    The first group describes image creation, which include all the required
    information for SlipStream to build a new machine image. The second group
    is the deployment execution, which enables SlipStream to execute the
    machine image (node) as part of a coherent multi-tier software system. In
    this section, we describe both groups.</para>
  </section>

  <section>
    <title>Viewing Machine Image</title>

    <para>To view a machine image, navigate to the image module by clicking on
    its parent name hierarchy from the root project. On the machine image
    page, you will have access to the <emphasis>Summary</emphasis> tab,
    selected by default, as well as several other tabs, described in details
    in the following section. Note that only tabs with corresponding defined
    data are shown in view mode, which de clutters the user interface.</para>
  </section>

  <section>
    <title>Editing Machine Image</title>

    <para>To edit a machine image, navigate to the image module by clicking on
    its parent name hierarchy from the root project. On the desired image page
    hit the <emphasis>Edit</emphasis> button.</para>

    <section>
      <title>Summary</title>

      <para>The default tab for Machine Image module is the
      <emphasis>Summary</emphasis> <xref linkend="fig-machine-image-summary">
           . 
        </xref>. On that tab, your can edit general information such as
      description.</para>

      <figure xml:id="fig-machine-image-summary">
        <title>Machine Image Summary</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentwidth="14cm"
                       fileref="images/MachineImage/machine-image-summary.png"
                       format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>
    </section>

    <section>
      <title>Reference</title>

      <para>As mentioned in the introduction, machine images can inherit from
      other machine images. The <emphasis>Reference tab</emphasis> is where
      this information is captured <xref linkend="fig-machine-image-reference">
           . 
        </xref>.</para>

      <figure xml:id="fig-machine-image-reference">
        <title>Machine Image Reference</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentwidth="14cm"
                       fileref="images/MachineImage/machine-image-reference.png"
                       format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para><variablelist>
          <varlistentry>
            <term>Image Type</term>

            <listitem>
              <para>The machine image type describes the type of machine image
              this module describes. For Amazon cloud choose
              <emphasis>AMI</emphasis> (Amazon Machine Image). For StratusLab
              cloud choose <emphasis>Other</emphasis>.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Machine Image Reference</term>

            <listitem>
              <para>If your model inherits from an existing SlipStream machine
              image, use this field to capture that data. To choose an
              existing machine image, simply hit the <emphasis>Choose
              Reference</emphasis> button, navigate to the model and hit the
              <emphasis>Select</emphasis> button. The referenced model has to
              have been built before you will be allowed to build this machine
              image, unless the machine image is virtual (see below for
              details on a virtual machine image).</para>

              <para><emphasis role="bold">Important</emphasis>: If you are
              defining a plain image, which will be used as the reference for
              a stock image, this field must be left blank.</para>
            </listitem>
          </varlistentry>

          <varlistentry>
            <term>Machine Image ID</term>

            <listitem>
              <para>This field captures the underlying cloud service machine
              image unique identifier. When you successfully build a machine
              image, a new version of the corresponding module is
              automatically created by SlipStream, and the new machine image
              unique identifier assigned by the underlying cloud environment
              is set to this field. This is identifier is then used by
              SlipStream to identify the virtual machine to start during
              deployment execution.</para>

              <para>If you're defining a plain image, which will be used as a
              reference by a stock image, manually enter the corresponding
              machine image unique identifier of the plain image. This should
              be the only case for which you would be entering this value by
              hand. Other corner cases exists such at the case where you would
              be building a SlipStream machine image completely by hand, but
              we discourage you from doing this.</para>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </section>

    <section>
      <title>Creation</title>

      <para>The <emphasis>Creation tab</emphasis> <xref
          linkend="fig-machine-image-creation">
           . 
        </xref> contains the information required to build a new machine
      image. Here are the details:</para>

      <figure xml:id="fig-machine-image-creation">
        <title>Machine Image Creation</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentwidth="14cm"
                       fileref="images/MachineImage/machine-image-creation.png"
                       format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <variablelist>
        <varlistentry>
          <term>Bootstrap recipe</term>

          <listitem>
            <para>By default this field is collapsed and you'll have to click
            on the down arrow at the far right of the field title to expand
            the field in order to enter data. If the image you are creating is
            a stock image <!--             (refer to XXX for a reminder of what stock images are) -->
            you need to provide a script responsible for installing the
            dependencies <!-- (see XXX for a list of dependencies) --> the
            SlipStream Client requires. The Tutorial document <!-- (see XXX) -->
            provides examples of bootstrap scripts and you'll also find
            examples in the public stock images that you can find <link
            xlink:href="https://slipstream.sixsq.com/projects/Public/Images">here</link>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Packages</term>

          <listitem>
            <para>For Linux-like operating system, you can take advantage of
            the apt/yum installation mechanism that these types of operating
            system support. All packages listed in this field will be
            installed using either <emphasis>yum</emphasis> or
            <emphasis>apt</emphasis> (a local detection mechanism is
            implemented by the SlipStream Client). To add a package to the
            list, simply click on the <literal>Add Package</literal> button
            and fill the new added field. To remove an item on the list,
            simply click on the <literal>Remove</literal> button corresponding
            to this field. The order of the packages doesn't matter since the
            entire list is provided to the yum or apt command, which will
            internally sort-out the dependencies as a set.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Recipe</term>

          <listitem>
            <para>The <emphasis>Recipe</emphasis> is the main script where you
            can configure the machine. For example, any modifications to
            configuration files should be done here. You can also download
            other scripts and code, such that you can delegate the
            configuration to these scripts. We recommend that if you decide to
            delegate the configuration to other scripts, that these scripts
            are downloaded from version controlled sources. Further, you can
            use the SlipStream Client to fetch SlipStream properties (see next
            section), which allows you to parametrize your scripts, hence
            making them more manageable. The SlipStream Client also provides a
            few helper commands to modify simple key/value configuration files
            <!-- (see XXX for details) -->.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <para>Note that if a machine or disk image doesn't have anything
      declared in this tab, the image is considered
      <emphasis>virtual</emphasis>, which means that it doesn't have to be
      created. This is useful if for example you decide to only use Deployment
      information (see below), where the customisation of the machine image is
      performed during the deployment. Another usage for virtual images is
      similar to the concept of abstract classes in object oriented
      programming languages. This means that the image can be configured with
      parameters and properties, which will be inherited by images setting a
      reference to a virtual image.<!-- A documented use-case of this feature is
      the Torque Use-case (see XXX), which uses it to define credentials to
      several machine images, from a single location: the parent image. --></para>
    </section>

    <section>
      <title>Parameters</title>

      <para><emphasis>Parameters</emphasis> play an important role in
      SlipStream. They provide key/value pairs used for the synchronisation
      and messaging API used during the deployment execution. They also
      provide parametrisation support for user scripts (e.g. recipes). Here
      are the different types of properties you can define <xref
          linkend="fig-machine-image-parameters">
           . 
        </xref>:</para>

      <figure xml:id="fig-machine-image-parameters">
        <title>Machine Image Parameters</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentwidth="14cm"
                       fileref="images/MachineImage/machine-image-parameters.png"
                       format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <variablelist>
        <!--       
        <varlistentry>
          <term>Constant Properties</term>

          <listitem>
            <para>Constant properties are the main mechanism for
            parameterizing a machine image. Using properties allows you to
            abstract from your scripts information that you can control at a
            higher level as properties. This reduces duplication in
            configuration information, since properties are centralised for
            each machine and disk image. To add a property, simply click on
            the <emphasis>Add Property</emphasis> button and fill the
            corresponding field. Note that you need to provide a value for
            constant properties. To remove the property, simply click on the
            <emphasis>Remove</emphasis> button of the corresponding
            property.</para>
          </listitem>
        </varlistentry>
 -->

        <varlistentry>
          <term>Input Parameters</term>

          <listitem>
            <para>Input parameters are used to declare that the machine image
            requires input information in order to configure itself. For
            example, the <emphasis>hostname</emphasis> or the <emphasis>IP
            address</emphasis> of a database for a server or a server for a
            client. Optionally, input parameters can have default values,
            which means that they do not have to be explicitly provided in
            each deployment. Unless a default value is provided, for a
            deployment to be valid, all its nodes (i.e. assigned machine
            images) must have their input parameters resolved, in other words
            all the input parameters must be either connected to output
            parameters of other nodes, or directly resolved as a quoted
            string. <!--             For more details on resolving input parameters, refer to XXX. -->
            Input properties can be added by clicking on the <emphasis>Add
            Parameter</emphasis> button.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>Output Parameters</term>

          <listitem>
            <para>As opposed to input parameters, output parameters are there
            to provide information about the machine or disk image that can be
            of interest for other machine or disk images. This information is
            typically dedicated to the clients running on different machines,
            wanting to access services running on the current machine.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <!--       <para>To learn about how can properties and parameter be used in
      scripts, refer to XXX.</para>
 -->
    </section>

    <section>
      <title>Deployment</title>

      <para>As mentioned in the introduction of the chapter, the
      <emphasis>Deployment tab</emphasis> <xref
          linkend="fig-machine-image-deployment">
           . 
        </xref> contains scripts that will be executed every time a machine
      image is used (as a node) during a deployment. This is in contrast with
      the <emphasis>Creation tab</emphasis> that contains scripts and packages
      that are executed when <emphasis>creating</emphasis> the machine image.
      As we were saying, deployment scripts execute every time the machine
      image boots, as part of a deployment. To understand deployment scripts,
      their role and what is expected of them, we think that it's important to
      understand the states each deployments go through, hence the deployment
      workflow.<!--       You will find a description of these states here: XXX. --></para>

      <figure xml:id="fig-machine-image-deployment">
        <title>Machine Image Deployment</title>

        <mediaobject>
          <imageobject>
            <imagedata align="center" contentwidth="14cm"
                       fileref="images/MachineImage/machine-image-deployment.png"
                       format="PNG"></imagedata>
          </imageobject>
        </mediaobject>
      </figure>

      <para>Deployment scripts are called <emphasis>targets</emphasis> in
      SlipStream. To add a target, simply click on the <emphasis>Add
      Target</emphasis> button. And to remove a script, click on the
      corresponding script's <emphasis>Remove</emphasis> button. Here are the
      scripts that can be defined (both are optional):</para>

      <variablelist>
        <varlistentry>
          <term>execute</term>

          <listitem>
            <para>During the <emphasis>Execute state</emphasis> of the machine
            image, the SlipStream Client executes this script, if defined. If
            the script executes a service, which must run for the entire
            duration of the deployment and if the image doesn't have knowledge
            of when the deployment must end, then tick the <emphasis>Run in
            the background</emphasis> check box. Doing this instructs the
            SlipStream Client to launch the script in the background, and
            continue the normal deployment workflow. If you do not tick this
            box, the script will block (even if you put it in the background
            using the <emphasis>&amp;</emphasis> symbol in Linux/Unix
            systems), resulting in blocking the entire deployment, until the
            general timeout expires and the orchestrator terminates the
            deployment with an error.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>report</term>

          <listitem>
            <para>By default, the SlipStream Client output are added to the
            report bundle (.tgz file) that you can access at the end of each
            deployment. If you require further information in this report
            bundle, simply implement this target. This target is often used to
            gather log files. The SlipStream Client expects that you put the
            files that you want added to the report bundle in
            <literal>/tmp/slipstream/reports</literal>.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>

    <xi:include href="section-tab-authorization.xml" xpointer="element(/1)" />
  </section>
</chapter>
